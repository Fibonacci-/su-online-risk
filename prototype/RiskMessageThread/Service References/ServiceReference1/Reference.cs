//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RiskMessageThread.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRiskServer")]
    public interface IRiskServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/GetData", ReplyAction="http://tempuri.org/IRiskServer/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/GetData", ReplyAction="http://tempuri.org/IRiskServer/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IRiskServer/GetDataUsingDataContractResponse")]
        WCFRiskServer.CompositeType GetDataUsingDataContract(WCFRiskServer.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IRiskServer/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCFRiskServer.CompositeType> GetDataUsingDataContractAsync(WCFRiskServer.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/Login", ReplyAction="http://tempuri.org/IRiskServer/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/Login", ReplyAction="http://tempuri.org/IRiskServer/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/newUser", ReplyAction="http://tempuri.org/IRiskServer/newUserResponse")]
        bool newUser(string username, string hashpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/newUser", ReplyAction="http://tempuri.org/IRiskServer/newUserResponse")]
        System.Threading.Tasks.Task<bool> newUserAsync(string username, string hashpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/chatMessage", ReplyAction="http://tempuri.org/IRiskServer/chatMessageResponse")]
        bool chatMessage(string username, [System.ServiceModel.MessageParameterAttribute(Name="chatmessage")] string chatmessage1, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/chatMessage", ReplyAction="http://tempuri.org/IRiskServer/chatMessageResponse")]
        System.Threading.Tasks.Task<bool> chatMessageAsync(string username, string chatmessage, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/sendSystemMessage", ReplyAction="http://tempuri.org/IRiskServer/sendSystemMessageResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SUOnlineRisk.RiskMessage))]
        void sendSystemMessage(int gameID, SUOnlineRisk.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/sendSystemMessage", ReplyAction="http://tempuri.org/IRiskServer/sendSystemMessageResponse")]
        System.Threading.Tasks.Task sendSystemMessageAsync(int gameID, SUOnlineRisk.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/logoff", ReplyAction="http://tempuri.org/IRiskServer/logoffResponse")]
        void logoff(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/logoff", ReplyAction="http://tempuri.org/IRiskServer/logoffResponse")]
        System.Threading.Tasks.Task logoffAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/findGames", ReplyAction="http://tempuri.org/IRiskServer/findGamesResponse")]
        int[] findGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/findGames", ReplyAction="http://tempuri.org/IRiskServer/findGamesResponse")]
        System.Threading.Tasks.Task<int[]> findGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/joinGame", ReplyAction="http://tempuri.org/IRiskServer/joinGameResponse")]
        bool joinGame(string username, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/joinGame", ReplyAction="http://tempuri.org/IRiskServer/joinGameResponse")]
        System.Threading.Tasks.Task<bool> joinGameAsync(string username, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/startGame", ReplyAction="http://tempuri.org/IRiskServer/startGameResponse")]
        int startGame(string username, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/startGame", ReplyAction="http://tempuri.org/IRiskServer/startGameResponse")]
        System.Threading.Tasks.Task<int> startGameAsync(string username, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/newGame", ReplyAction="http://tempuri.org/IRiskServer/newGameResponse")]
        int newGame(string username, string mapname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/newGame", ReplyAction="http://tempuri.org/IRiskServer/newGameResponse")]
        System.Threading.Tasks.Task<int> newGameAsync(string username, string mapname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/getMap", ReplyAction="http://tempuri.org/IRiskServer/getMapResponse")]
        SUOnlineRisk.Map getMap(int gameID, string mapname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/getMap", ReplyAction="http://tempuri.org/IRiskServer/getMapResponse")]
        System.Threading.Tasks.Task<SUOnlineRisk.Map> getMapAsync(int gameID, string mapname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/getPlayerList", ReplyAction="http://tempuri.org/IRiskServer/getPlayerListResponse")]
        string[] getPlayerList(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/getPlayerList", ReplyAction="http://tempuri.org/IRiskServer/getPlayerListResponse")]
        System.Threading.Tasks.Task<string[]> getPlayerListAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/Request", ReplyAction="http://tempuri.org/IRiskServer/RequestResponse")]
        SUOnlineRisk.RiskMessage Request(SUOnlineRisk.RiskMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskServer/Request", ReplyAction="http://tempuri.org/IRiskServer/RequestResponse")]
        System.Threading.Tasks.Task<SUOnlineRisk.RiskMessage> RequestAsync(SUOnlineRisk.RiskMessage msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRiskServerChannel : RiskMessageThread.ServiceReference1.IRiskServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RiskServerClient : System.ServiceModel.ClientBase<RiskMessageThread.ServiceReference1.IRiskServer>, RiskMessageThread.ServiceReference1.IRiskServer {
        
        public RiskServerClient() {
        }
        
        public RiskServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RiskServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RiskServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RiskServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WCFRiskServer.CompositeType GetDataUsingDataContract(WCFRiskServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WCFRiskServer.CompositeType> GetDataUsingDataContractAsync(WCFRiskServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool newUser(string username, string hashpass) {
            return base.Channel.newUser(username, hashpass);
        }
        
        public System.Threading.Tasks.Task<bool> newUserAsync(string username, string hashpass) {
            return base.Channel.newUserAsync(username, hashpass);
        }
        
        public bool chatMessage(string username, string chatmessage1, int gameID) {
            return base.Channel.chatMessage(username, chatmessage1, gameID);
        }
        
        public System.Threading.Tasks.Task<bool> chatMessageAsync(string username, string chatmessage, int gameID) {
            return base.Channel.chatMessageAsync(username, chatmessage, gameID);
        }
        
        public void sendSystemMessage(int gameID, SUOnlineRisk.Message message) {
            base.Channel.sendSystemMessage(gameID, message);
        }
        
        public System.Threading.Tasks.Task sendSystemMessageAsync(int gameID, SUOnlineRisk.Message message) {
            return base.Channel.sendSystemMessageAsync(gameID, message);
        }
        
        public void logoff(string username) {
            base.Channel.logoff(username);
        }
        
        public System.Threading.Tasks.Task logoffAsync(string username) {
            return base.Channel.logoffAsync(username);
        }
        
        public int[] findGames() {
            return base.Channel.findGames();
        }
        
        public System.Threading.Tasks.Task<int[]> findGamesAsync() {
            return base.Channel.findGamesAsync();
        }
        
        public bool joinGame(string username, int gameID) {
            return base.Channel.joinGame(username, gameID);
        }
        
        public System.Threading.Tasks.Task<bool> joinGameAsync(string username, int gameID) {
            return base.Channel.joinGameAsync(username, gameID);
        }
        
        public int startGame(string username, int gameID) {
            return base.Channel.startGame(username, gameID);
        }
        
        public System.Threading.Tasks.Task<int> startGameAsync(string username, int gameID) {
            return base.Channel.startGameAsync(username, gameID);
        }
        
        public int newGame(string username, string mapname) {
            return base.Channel.newGame(username, mapname);
        }
        
        public System.Threading.Tasks.Task<int> newGameAsync(string username, string mapname) {
            return base.Channel.newGameAsync(username, mapname);
        }
        
        public SUOnlineRisk.Map getMap(int gameID, string mapname) {
            return base.Channel.getMap(gameID, mapname);
        }
        
        public System.Threading.Tasks.Task<SUOnlineRisk.Map> getMapAsync(int gameID, string mapname) {
            return base.Channel.getMapAsync(gameID, mapname);
        }
        
        public string[] getPlayerList(int gameID) {
            return base.Channel.getPlayerList(gameID);
        }
        
        public System.Threading.Tasks.Task<string[]> getPlayerListAsync(int gameID) {
            return base.Channel.getPlayerListAsync(gameID);
        }
        
        public SUOnlineRisk.RiskMessage Request(SUOnlineRisk.RiskMessage msg) {
            return base.Channel.Request(msg);
        }
        
        public System.Threading.Tasks.Task<SUOnlineRisk.RiskMessage> RequestAsync(SUOnlineRisk.RiskMessage msg) {
            return base.Channel.RequestAsync(msg);
        }
    }
}
