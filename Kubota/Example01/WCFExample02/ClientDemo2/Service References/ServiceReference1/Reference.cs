//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientDemo2.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRiskMessageService")]
    public interface IRiskMessageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/Request", ReplyAction="http://tempuri.org/IRiskMessageService/RequestResponse")]
        SUOnlineRisk.RiskMessage Request(SUOnlineRisk.RiskMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/Request", ReplyAction="http://tempuri.org/IRiskMessageService/RequestResponse")]
        System.Threading.Tasks.Task<SUOnlineRisk.RiskMessage> RequestAsync(SUOnlineRisk.RiskMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/Logon", ReplyAction="http://tempuri.org/IRiskMessageService/LogonResponse")]
        bool Logon(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/Logon", ReplyAction="http://tempuri.org/IRiskMessageService/LogonResponse")]
        System.Threading.Tasks.Task<bool> LogonAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/createGame", ReplyAction="http://tempuri.org/IRiskMessageService/createGameResponse")]
        int createGame(int mapId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/createGame", ReplyAction="http://tempuri.org/IRiskMessageService/createGameResponse")]
        System.Threading.Tasks.Task<int> createGameAsync(int mapId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/joinGame", ReplyAction="http://tempuri.org/IRiskMessageService/joinGameResponse")]
        bool joinGame(string name, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/joinGame", ReplyAction="http://tempuri.org/IRiskMessageService/joinGameResponse")]
        System.Threading.Tasks.Task<bool> joinGameAsync(string name, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/startGame", ReplyAction="http://tempuri.org/IRiskMessageService/startGameResponse")]
        bool startGame(string name, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRiskMessageService/startGame", ReplyAction="http://tempuri.org/IRiskMessageService/startGameResponse")]
        System.Threading.Tasks.Task<bool> startGameAsync(string name, int gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRiskMessageServiceChannel : ClientDemo2.ServiceReference1.IRiskMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RiskMessageServiceClient : System.ServiceModel.ClientBase<ClientDemo2.ServiceReference1.IRiskMessageService>, ClientDemo2.ServiceReference1.IRiskMessageService {
        
        public RiskMessageServiceClient() {
        }
        
        public RiskMessageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RiskMessageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RiskMessageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RiskMessageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SUOnlineRisk.RiskMessage Request(SUOnlineRisk.RiskMessage msg) {
            return base.Channel.Request(msg);
        }
        
        public System.Threading.Tasks.Task<SUOnlineRisk.RiskMessage> RequestAsync(SUOnlineRisk.RiskMessage msg) {
            return base.Channel.RequestAsync(msg);
        }
        
        public bool Logon(string name, string password) {
            return base.Channel.Logon(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LogonAsync(string name, string password) {
            return base.Channel.LogonAsync(name, password);
        }
        
        public int createGame(int mapId) {
            return base.Channel.createGame(mapId);
        }
        
        public System.Threading.Tasks.Task<int> createGameAsync(int mapId) {
            return base.Channel.createGameAsync(mapId);
        }
        
        public bool joinGame(string name, int gameId) {
            return base.Channel.joinGame(name, gameId);
        }
        
        public System.Threading.Tasks.Task<bool> joinGameAsync(string name, int gameId) {
            return base.Channel.joinGameAsync(name, gameId);
        }
        
        public bool startGame(string name, int gameId) {
            return base.Channel.startGame(name, gameId);
        }
        
        public System.Threading.Tasks.Task<bool> startGameAsync(string name, int gameId) {
            return base.Channel.startGameAsync(name, gameId);
        }
    }
}
